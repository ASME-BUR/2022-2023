// Generated by gencpp from file rov/imu.msg
// DO NOT EDIT!


#ifndef ROV_MESSAGE_IMU_H
#define ROV_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rov
{
template <class ContainerAllocator>
struct imu_
{
  typedef imu_<ContainerAllocator> Type;

  imu_()
    : linear()
    , angular()  {
      linear.assign(0.0);

      angular.assign(0.0);
  }
  imu_(const ContainerAllocator& _alloc)
    : linear()
    , angular()  {
  (void)_alloc;
      linear.assign(0.0);

      angular.assign(0.0);
  }



   typedef boost::array<float, 3>  _linear_type;
  _linear_type linear;

   typedef boost::array<float, 3>  _angular_type;
  _angular_type angular;





  typedef boost::shared_ptr< ::rov::imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rov::imu_<ContainerAllocator> const> ConstPtr;

}; // struct imu_

typedef ::rov::imu_<std::allocator<void> > imu;

typedef boost::shared_ptr< ::rov::imu > imuPtr;
typedef boost::shared_ptr< ::rov::imu const> imuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rov::imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rov::imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rov::imu_<ContainerAllocator1> & lhs, const ::rov::imu_<ContainerAllocator2> & rhs)
{
  return lhs.linear == rhs.linear &&
    lhs.angular == rhs.angular;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rov::imu_<ContainerAllocator1> & lhs, const ::rov::imu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rov

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rov::imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rov::imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rov::imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rov::imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rov::imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rov::imu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rov::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc7ac922642df8ef742b73a9501e5b6d";
  }

  static const char* value(const ::rov::imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc7ac922642df8efULL;
  static const uint64_t static_value2 = 0x742b73a9501e5b6dULL;
};

template<class ContainerAllocator>
struct DataType< ::rov::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rov/imu";
  }

  static const char* value(const ::rov::imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rov::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[3] linear\n"
"float32[3] angular\n"
;
  }

  static const char* value(const ::rov::imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rov::imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear);
      stream.next(m.angular);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rov::imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rov::imu_<ContainerAllocator>& v)
  {
    s << indent << "linear[]" << std::endl;
    for (size_t i = 0; i < v.linear.size(); ++i)
    {
      s << indent << "  linear[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.linear[i]);
    }
    s << indent << "angular[]" << std::endl;
    for (size_t i = 0; i < v.angular.size(); ++i)
    {
      s << indent << "  angular[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angular[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROV_MESSAGE_IMU_H
