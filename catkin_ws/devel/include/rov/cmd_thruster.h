// Generated by gencpp from file rov/cmd_thruster.msg
// DO NOT EDIT!


#ifndef ROV_MESSAGE_CMD_THRUSTER_H
#define ROV_MESSAGE_CMD_THRUSTER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rov
{
template <class ContainerAllocator>
struct cmd_thruster_
{
  typedef cmd_thruster_<ContainerAllocator> Type;

  cmd_thruster_()
    : thruster_val()
    , buttons()  {
    }
  cmd_thruster_(const ContainerAllocator& _alloc)
    : thruster_val(_alloc)
    , buttons(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _thruster_val_type;
  _thruster_val_type thruster_val;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _buttons_type;
  _buttons_type buttons;





  typedef boost::shared_ptr< ::rov::cmd_thruster_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rov::cmd_thruster_<ContainerAllocator> const> ConstPtr;

}; // struct cmd_thruster_

typedef ::rov::cmd_thruster_<std::allocator<void> > cmd_thruster;

typedef boost::shared_ptr< ::rov::cmd_thruster > cmd_thrusterPtr;
typedef boost::shared_ptr< ::rov::cmd_thruster const> cmd_thrusterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rov::cmd_thruster_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rov::cmd_thruster_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rov::cmd_thruster_<ContainerAllocator1> & lhs, const ::rov::cmd_thruster_<ContainerAllocator2> & rhs)
{
  return lhs.thruster_val == rhs.thruster_val &&
    lhs.buttons == rhs.buttons;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rov::cmd_thruster_<ContainerAllocator1> & lhs, const ::rov::cmd_thruster_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rov

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rov::cmd_thruster_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rov::cmd_thruster_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rov::cmd_thruster_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rov::cmd_thruster_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rov::cmd_thruster_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rov::cmd_thruster_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rov::cmd_thruster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65da02d2a44549142e6d6c43c806567f";
  }

  static const char* value(const ::rov::cmd_thruster_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65da02d2a4454914ULL;
  static const uint64_t static_value2 = 0x2e6d6c43c806567fULL;
};

template<class ContainerAllocator>
struct DataType< ::rov::cmd_thruster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rov/cmd_thruster";
  }

  static const char* value(const ::rov::cmd_thruster_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rov::cmd_thruster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] thruster_val\n"
"int8[] buttons\n"
;
  }

  static const char* value(const ::rov::cmd_thruster_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rov::cmd_thruster_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.thruster_val);
      stream.next(m.buttons);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmd_thruster_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rov::cmd_thruster_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rov::cmd_thruster_<ContainerAllocator>& v)
  {
    s << indent << "thruster_val[]" << std::endl;
    for (size_t i = 0; i < v.thruster_val.size(); ++i)
    {
      s << indent << "  thruster_val[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.thruster_val[i]);
    }
    s << indent << "buttons[]" << std::endl;
    for (size_t i = 0; i < v.buttons.size(); ++i)
    {
      s << indent << "  buttons[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.buttons[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROV_MESSAGE_CMD_THRUSTER_H
